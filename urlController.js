const dns = require('dns');

// Get the URL Model
const urlModel = require('./UrlModel');

// Create a new short url--------------------------------------------------------------
exports.create = (req, res) => {
  const url = req.body.url;
  
  // Make sure submitted url points to a valid site
  const dnsLookup = new Promise((resolve, reject) => {
    const result = url.replace(/(^\w+:|^)\/\//, "");  // take off the "http://" part of url
    
    // lookup the url
    dns.lookup(result, (err, address) => {
      if (err) reject(err);
      resolve(address);
    });
  });
  
  // If already exists, return current 
  // otherwise make new
  dnsLookup
    .then(() => checkIfExists(url))
  
    // save it to db if not already in there
    .then(data => {
      if (data.status) { // if already in there it has a status
        return res.json({original_url: url, short_url: data.shortUrl});
        
      }  else {  // not in there, make new doc in the db
        
        const shortUrl = getShortUrl();
        const urlDoc = new urlModel({
          original_url: url,
          short_url: shortUrl
        });
        return saveUrlDocToDataBase(urlDoc);
      }
    })
  
    // send the json response
    .then((doc) => res.json({doc}))
  
    .catch(err => {
       return res.json({"error":"invalid URL"});
    });
  
};

// go to shortened Url's website -------------------------------------------------------
exports.goTo = (req, res) => {
  // use the id generated by db to get the url
  const originalUrlPromise = findOriginalUrl(req.params.shorturl);
  
  originalUrlPromise
    .then(originalUrl => res.redirect(originalUrl))
    .catch(err => res.json({ error: "invalid URL" }));
};

// return promise obj with info about searched url--------------------------------------
function checkIfExists(url) {
  return new Promise((resolve, reject) => {
    urlModel.findOne({original_url: url}, (err, data) => {
      if (data === null || err) resolve({ status: false });
      else resolve({ status: true, short_url: data.short_url });
    });
  });
}

function findOriginalUrl(num) {
  return new Promise((resolve, reject) => {
    urlModel.findOne({ short_url: num }, (err, doc) => {
      if (err || doc === null) return reject(err);
      else return resolve(doc.original_url);
    });
  });
}

// Functions for generating new short url------------------------------------------------
let nums = [];

function generateNum() {
    return Math.floor(Math.random() * 100) + 1;  
}

// function to generate a short url
function getShortUrl() {
  let n = generateNum();

  if (!nums.includes(n)) {
    nums.push(n);
    return n;
  } else {
    if (nums.length === 100) {
        nums = [];
        return getShortUrl();
      } else {
        return getShortUrl();
      }
  }
}

// Save new doc to the database------------------------------------------------------------
function saveUrlDocToDataBase(doc) {
  return new Promise((resolve, reject) => {
    doc.save((err, data) => {
      if (err) return reject(err);
      return resolve(null, data);
    });
  }); 
}